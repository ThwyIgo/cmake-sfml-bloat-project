#+LANGUAGE: en

This template is a little more bloated than [[https://github.com/SFML/cmake-sfml-project][cmake-sfml-project]]. It should help
you to manage runtime assets (such as sprites and audio), create a Windows
installer, a Nix derivation and an AppImage.

I test this template on Linux and Windows, though it *might* work on MacOS.

* Structure of the project
| Directory    | Description      |
|--------------+------------------|
| src/         | C++ source files |
| src/include/ | C++ header files |
| data/        | Runtime assets   |
| nix/         | Nix files        |

* Understanding what each file does

** CMakeLists.txt
This is the most important file. It is the first file read by CMake, which is a
cross platform build automation tool, which can generate files for various build
systems, e.g. Visual Studio solution, Makefile, Ninja.

Building a CMake project requires 2 steps: configuring and building.
- Configuring is just the generation of build system files. The typical way to
  do it is
  #+begin_src shell
  cmake -S . -B out -DCMAKE_BUILD_TYPE=Release # or Debug
  #+end_src
  It will pick a build system automatically depending on what you have installed
  on your system and generate it's files in =out/= directory.

- Building will compile the source code.
  #+begin_src shell
  cmake --build out # out is the name of the directory where the project was configured
  #+end_src

If it doesn't work, it might be because you are using a multi-configuration
generator, if this is the case, you should do the following instead:
#+begin_src shell
cmake -S . -B out
cmake --build out --config Release
#+end_src

Building the project in any of the above ways will fetch SFML and Boost source code
and compile it. It will also set the =data/= directory location to an absolute
path, so the generated executable won't be portable. If you're interested in
sharing a pre-built binary, you'll probably need to pass some options to cmake
on the command line or use [[*CMakePresets.json][CMakePresets.json]].

*** CMake options for this project
| Option             | Description                                               | Default |
|--------------------+-----------------------------------------------------------+---------|
| fetchSFML          | Download and compile SFML automatically                   | ON      |
| fetchBoost         | Download and compile Boost automatically                  | ON      |
| USE_RELATIVE_PATHS | Set some variables as relative paths to install directory | OFF     |
| BUILD_SHARED_LIBS  | Build shared libraries                                    | ON      |
| CONFIG_PACKAGING   | Generate packaging files                                  | OFF     |

If you set on =USE_RELATIVE_PATHS=, keep in mind that files in the data folder
are copied to the output directory only when installing the project, i.e. if you
build, but don't install the project, DATA_PATH will be an invalid path.

*** Additional notes on project building
External libraries will be fetched by default. Note that if you're on Linux,
SFML require [[https://www.sfml-dev.org/tutorials/2.6/compile-with-cmake.php#installing-dependencies][it's dependencies]] to be installed.

Another option is to turn =fetchX= option OFF and install that dependency
through your package manager. Make sure you install the correct version of it.
You can check which version is needed by searching for it in CMakeLists.txt.

** CMakePresets.json
This file contains CMake presets that define options, variables, output and install
directories. You can use them like this:
#+begin_src shell
cmake --preset x64-debug-linux
cmake --build --preset x64-debug-linux
#+end_src
Some IDEs list these presets as Configure / Build "configurations" in their GUI.

** default.nix
This is the file that is read automatically by ~nix-build~ on Linux. Nix is a
package manager that can build packages from source.

** shell.nix
This is the file that is read automatically by ~nix-shell~ on Linux. Nix shell
provides a development environment with all the dependencies installed. Try
opening your text editor or IDE inside nix-shell and see how easy it is!

* Generating packaging files
Packaging files can be generated at the configure step by setting
=CONFIG_PACKAGING= option to =ON=. For example:
#+begin_src shell
cmake -S . -B out -DfetchSFML=OFF -DfetchBoost=OFF -DCONFIG_PACKAGING=ON
#+end_src
Generated files are based on =.in= files, e.g. =nix/derivation.nix= is generated
by =nix/derivation.nix.in=.

* Including files
Files located in =src/include/= are already in the include search path, so you
can just ~#include "file.hpp".~

* Using assets from the =data/= folder
Please, don't try to reference content in =data/= like this:
#+begin_src C++
variable.loadTexture("../data/Texture.png");
#+end_src
This is not portable. Use DATA_PATH defined in =config.hpp= instead
#+begin_src C++
#include "config.hpp"
/* The file config.hpp is generated by CMake through config.hpp.in. Your LSP
 * won't work if the project was never configured before */

variable.loadTexture((DATA_PATH / "Texture.png").generic_string());
#+end_src

The above method is generic and works for any situation, but if you're trying to
reference a file that would be used with SFML's ~loadFromFile()~ function, you
should give =AssetManager.hpp= a try. It defaults to the =data/= directory and
saves memory by not duplicating assets in memory.
#+begin_src C++
#include "AssetManager.hpp"
#include <SFML/Graphics.hpp>

// Important to take the return value by &reference if you want to save memory
sf::Texture& texture = AssetManager<sf::Texture>::Get("Texture.png");
Sprite.setTexture(texture);
#+end_src

* Using =debug.hpp=
=debug.hpp= provides macros that only work in Debug mode. In Release mode, these
macros are ignored, in fact, they're replaced with empty lines.
#+begin_src C++
#include "debug.hpp"
/* Any variable that can be printed with `std::cerr << var` can be used with
 * these debug macros */

int myInt = 4;
// Print the line number with a message, variable name and value.
db_line("Useful message", myInt);
// Print the file name with line number, a message, variable name and value.
db_file("Useful message", myInt);
// You can give multiple variables to the macro.
db_line("Useful message", myInt, var1, var2, var3);
#+end_src

* Generating an installer / package
** Windows MSI
1. Install Visual Studio Build Tools
   #+begin_src shell
   winget install Microsoft.VisualStudio.2022.BuildTools
   #+end_src
2. Install [[https://wixtoolset.org/][WIX toolset]]
   1. You can install WIX with [[https://scoop.sh/][Scoop]]. First open PowerShell and install Scoop.
      #+begin_src shell
      Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
      irm get.scoop.sh | iex
      #+end_src
   2. Run ~scoop install wixtoolset~
3. Open =x64 Native Tools Command Prompt for VS 2022=
4. Generate the installer
    #+begin_src shell
    cd "C:\path\to\project\root"
    cmake --preset x64-install-windows && cmake --build --preset x64-install-windows && cpack --preset x64-WIX
    #+end_src
5. The directory where the .msi was generated will be informed in the command output

** Linux AppImage
1. Install docker
2. Choose in =./tools/appimage/Dockerfile.in= if =BUILD_SHARED_LIBS= should be ON or OFF
   (also check other cmake flags)
3. ~cmake -S . -B out -DfetchSFML=OFF -DfetchBoost=OFF -DCONFIG_PACKAGING=ON~
4. Execute commands commented at the bottom of =./tools/appimage/Dockerfile=

You can open an interactive shell inside the docker container with
~docker run -ti --rm -v $PWD:/source -w /source myproject-appimage bash~

* IDE / text editor integration
Some IDEs / text editors have CMake support. The easiest ones to use are [[https://visualstudio.microsoft.com/][Visual
Studio]] and [[https://vscodium.com/][VSCodium]] with [[https://open-vsx.org/extension/ms-vscode/cmake-tools][CMake Tools]], [[https://open-vsx.org/extension/llvm-vs-code-extensions/vscode-clangd][clangd]] and [[https://open-vsx.org/extension/webfreak/debug][Native Debug]] extensions.

You might need to check =Cmake: Allow Unsupported Presets Versions= option and
set =Cmake: Copy Compile Commands= to =compile_commands.json= if
you're using CMake Tools and clangd.

* License
All files in this repository are licensed under WTFPL (see LICENSE file).

This work is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://www.wtfpl.net/ for more details.
